// Keywords: 

initialize() {
	initializeSLiMOptions(nucleotideBased=T);
	initializeAncestralNucleotides(randomNucleotides(30e6));	
	
	// set up mutation types
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);         // non-coding
	initializeMutationTypeNuc("m2", 0.5, "f", 0.0);         // synonymous
	initializeMutationTypeNuc("m3", 0.1, "g", -0.03, 0.2);  // deleterious
	initializeMutationTypeNuc("m4", 0.8, "e", 0.1);         // beneficial
	
	// set up genomic features
	initializeGenomicElementType("g1", c(m2,m3,m4), c(2,8,0.1), mmJukesCantor(MUTATION_RATE/3));  // exon
	initializeGenomicElementType("g2", c(m1,m3), c(9,1), mmJukesCantor(MUTATION_RATE/3));       // intron
	initializeGenomicElementType("g3", c(m1), 1, mmJukesCantor(MUTATION_RATE/3)); // non-coding
	
	
	// Generate random genes along an approximately 100000-base chromosome
	base = 0;
	
	while (base < 29.59999e6) {
		// make a non-coding region
		nc_length = rdunif(1, 100, 5000);
		initializeGenomicElement(g3, base, base + nc_length - 1);
		base = base + nc_length;
		
		// make first exon
		ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1;
		initializeGenomicElement(g1, base, base + ex_length - 1);
		base = base + ex_length;
		
		// make additional intron-exon pairs
		do
		{
			in_length = asInteger(rlnorm(1, log(100), log(1.5))) + 10;
			initializeGenomicElement(g2, base, base + in_length - 1);
			base = base + in_length;
			
			ex_length = asInteger(rlnorm(1, log(50), log(2))) + 1;
			initializeGenomicElement(g1, base, base + ex_length - 1);
			base = base + ex_length;
		}
		while (runif(1) < 0.8);  // 20% probability of stopping
	}
	
	// final non-coding region
	nc_length = 30e6 - base;
	initializeGenomicElement(g3, base, base + nc_length - 1);
	
	// single recombination rate
	initializeRecombinationRate(RECOMB_RATE);
}
1 {	
	// Output ancestral sequence in fasta format
	header = ">1";
	sequence = sim.chromosome.ancestralNucleotides();
	writeFile(OUT_PATH + "ancestral.fasta", header, append=F);
	writeFile(OUT_PATH + "ancestral.fasta", sequence, append=T);
	sim.addSubpop("p1", POP_SIZE);
}
// # of generations to run
10000 late() {

	// This line works by itself to output all individuals in the population
	p1.genomes.outputVCF(OUT_PATH + "final_pop.vcf");
}
